/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NFTAuction,
  NFTAuctionInterface,
} from "../../contracts/NFTAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NFTAuction__AuctionIsClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__AuctionIsRunning",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__NotERC721Calling",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [],
    name: "AuctionEnd",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct NFTAuction.Auction",
        name: "newAuction",
        type: "tuple",
      },
    ],
    name: "NewAuctionStart",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "bidder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "previousBidder",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct NFTAuction.Auction",
        name: "auction",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NewHighestBidder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "bidOnNft",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "endAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionState",
    outputs: [
      {
        internalType: "enum NFTAuction.AuctionState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bidder",
        type: "address",
      },
    ],
    name: "getBidderRefundAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentAuction",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        internalType: "struct NFTAuction.Auction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tokenUri",
        type: "string",
      },
    ],
    name: "startAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001b8d38038062001b8d83398181016040528101906200003791906200024c565b620000576200004b6200011360201b60201c565b6200011b60201b60201c565b6200007367c3a9fdf8214c117f60c01b620001df60201b60201c565b6200008f6715d767b08303651e60c01b620001df60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000df674b824e0b18405ac160c01b620001df60201b60201c565b60008060146101000a81548160ff021916908360018111156200010757620001066200027e565b5b021790555050620002ad565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200021482620001e7565b9050919050565b620002268162000207565b81146200023257600080fd5b50565b60008151905062000246816200021b565b92915050565b600060208284031215620002655762000264620001e2565b5b6000620002758482850162000235565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6080516118b6620002d76000396000818161039201528181610b9d0152610d1401526118b66000f3fe6080604052600436106100dd5760003560e01c806373dc756c1161007f578063a4819a9711610059578063a4819a9714610243578063dcb66f1214610280578063f2fde38b146102ab578063fe67a54b146102d4576100dd565b806373dc756c146101c457806378cb51af146101ed5780638da5cb5b14610218576100dd565b806337271cc7116100bb57806337271cc7146101545780633ccfd60b1461016b578063667c99de14610182578063715018a6146101ad576100dd565b806308bfc300146100e2578063150b7a021461010d5780632659b13c1461014a575b600080fd5b3480156100ee57600080fd5b506100f76102eb565b6040516101049190611242565b60405180910390f35b34801561011957600080fd5b50610134600480360381019061012f9190611360565b61033e565b6040516101419190611423565b60405180910390f35b6101526106ab565b005b34801561016057600080fd5b50610169610b01565b005b34801561017757600080fd5b50610180610b17565b005b34801561018e57600080fd5b50610197610b5d565b6040516101a4919061144d565b60405180910390f35b3480156101b957600080fd5b506101c2610bc1565b005b3480156101d057600080fd5b506101eb60048036038101906101e691906114be565b610bd5565b005b3480156101f957600080fd5b50610202610db5565b60405161020f919061151a565b60405180910390f35b34801561022457600080fd5b5061022d610dfc565b60405161023a919061144d565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190611535565b610e25565b604051610277919061151a565b60405180910390f35b34801561028c57600080fd5b50610295610eaa565b6040516102a291906115e8565b60405180910390f35b3480156102b757600080fd5b506102d260048036038101906102cd9190611535565b610fa0565b005b3480156102e057600080fd5b506102e9611023565b005b60006103016732afec64eacaf7f860c01b611039565b610315676e4f29ca3193063960c01b611039565b61032967361dd5d4df90446460c01b611039565b600060149054906101000a900460ff16905090565b60006103546753b7d1693eaccc7860c01b611039565b61036867f96208d894282a4260c01b611039565b61037c67395fb89f00306e4d60c01b611039565b610390676e18043d965d3a9f60c01b611039565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043d576103f76721c5fc10ef61b16360c01b611039565b61040b6777bba12bc1de4e3e60c01b611039565b6040517fcbe3282800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610451671192534c3fd93de560c01b611039565b61046567a63a8cae8d37f73160c01b611039565b61047967a5ea0b746838286960c01b611039565b61048d67048c7ded1366ccb060c01b611039565b6104a167946836408990aaee60c01b611039565b6001600060146101000a81548160ff021916908360018111156104c7576104c66111cb565b5b02179055506104e067ea5d80206c62727260c01b611039565b6104f467311d5ce48704606560c01b611039565b60006040518060a0016040528042815260200162069780426105169190611632565b8152602001868152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001662386f26fc10000815250905061055f67b40ed7114e7c9d7c60c01b611039565b610573677146fc020b99c5e460c01b611039565b600281908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401555050610624677d33227b44d81a3e60c01b611039565b6106386792b06a727c4f90a160c01b611039565b7f52cf86ea7b171700f88e16d46eab3d51ded34c5ecd49ca3d30d51d5f40abda068160405161066791906115e8565b60405180910390a161068367f8e8aeffddef3ee160c01b611039565b61069767f200b8a53760559a60c01b611039565b63150b7a0260e01b91505095945050505050565b6106bf67da4ead311431e75d60c01b611039565b6106d3677d36b665492ff3a960c01b611039565b6106e76732c7466038b5e98760c01b611039565b600060018111156106fb576106fa6111cb565b5b600060149054906101000a900460ff16600181111561071d5761071c6111cb565b5b0361077c57610736673bc6b42573f8734260c01b611039565b61074a6787988a9e5f2977de60c01b611039565b6040517f52f4ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610790676a08c810fd1272b960c01b611039565b6107a4672d095b3cf9d88f9160c01b611039565b6107b867cc2023c2549040de60c01b611039565b60006107c2610eaa565b90506107d867852c5b8d39b45f1760c01b611039565b6107ec67f9d2abd86c11d37d60c01b611039565b600081608001519050610809679d76ad408b9503ac60c01b611039565b61081d67ab4199a2d2af9b1d60c01b611039565b80341115610a7e5761083967f80c867530c8782f60c01b611039565b61084d6750250872ef784e4a60c01b611039565b6108616791a53688f0e1e47560c01b611039565b60008260600151905061087e67501c65cd84978a5160c01b611039565b81600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108cd9190611632565b925050819055506108e867c70c1b07b72f1ee460c01b611039565b33836060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610934673ffd52bcd42adf3360c01b611039565b3483608001818152505061095267e065c9a8efd8af2660c01b611039565b8260026001548154811061096957610968611666565b5b906000526020600020906005020160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401559050506109fd67d9f4edfd414316e060c01b611039565b610a116735859d74f244973260c01b611039565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e719138f105b40d8d745744a7011863c5633387ac9ec154040c324999ba0ddd8534604051610a70929190611695565b60405180910390a350610afd565b610a9267e2fa43f9f9afcead60c01b611039565b610aa667187726a1cdafe59360c01b611039565b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610af59190611632565b925050819055505b5050565b610b1567e30259ab6a97097a60c01b611039565b565b610b2b673cd02f1fd217045260c01b611039565b610b3361103c565b610b47673cd1830c3f50487060c01b611039565b610b5b677d6c88e0f6140e9260c01b611039565b565b6000610b73674212f11e9603efdb60c01b611039565b610b8767011162026ec671ca60c01b611039565b610b9b67d57706b0bd4f70df60c01b611039565b7f0000000000000000000000000000000000000000000000000000000000000000905090565b610bc961103c565b610bd360006110ba565b565b610be9675e8cd9fb5e653dba60c01b611039565b610bf161103c565b610c05675ff77a8234a7a03460c01b611039565b610c1967690c64b7b02a665460c01b611039565b610c2d677285e81d10969f9f60c01b611039565b610c4167b7caf3fa01fd263a60c01b611039565b60006001811115610c5557610c546111cb565b5b600060149054906101000a900460ff166001811115610c7757610c766111cb565b5b14610cd657610c9067671faa137d29509f60c01b611039565b610ca4671d91b385a16a17c160c01b611039565b6040517f869ea31d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610cea677283ae3d1b83812f60c01b611039565b610cfe6794a882aeca6a7fee60c01b611039565b610d126786a8b99cb5c69dbe60c01b611039565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a5d0bb283836040518363ffffffff1660e01b8152600401610d6d92919061171c565b6020604051808303816000875af1158015610d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db09190611755565b505050565b6000610dcb6705c68dc8f59bc16960c01b611039565b610ddf67b4954a519bd4392c60c01b611039565b610df367ac4eb68dd80b8bf060c01b611039565b62069780905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610e3b67ea4c3d403cc6705f60c01b611039565b610e4f672b44834832fbebfc60c01b611039565b610e636708cadb1d0c705e1060c01b611039565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610eb2611186565b610ec667c4e1ecdf646767fa60c01b611039565b610eda67c854ced48a30c9c260c01b611039565b610eee67bf4c5234c246108460c01b611039565b600260015481548110610f0457610f03611666565b5b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481525050905090565b610fa861103c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611017576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100e906117f4565b60405180910390fd5b611020816110ba565b50565b61103767b80543a0fdf7a46d60c01b611039565b565b50565b61104461117e565b73ffffffffffffffffffffffffffffffffffffffff16611062610dfc565b73ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90611860565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060a00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061120b5761120a6111cb565b5b50565b600081905061121c826111fa565b919050565b600061122c8261120e565b9050919050565b61123c81611221565b82525050565b60006020820190506112576000830184611233565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061129282611267565b9050919050565b6112a281611287565b81146112ad57600080fd5b50565b6000813590506112bf81611299565b92915050565b6000819050919050565b6112d8816112c5565b81146112e357600080fd5b50565b6000813590506112f5816112cf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126113205761131f6112fb565b5b8235905067ffffffffffffffff81111561133d5761133c611300565b5b60208301915083600182028301111561135957611358611305565b5b9250929050565b60008060008060006080868803121561137c5761137b61125d565b5b600061138a888289016112b0565b955050602061139b888289016112b0565b94505060406113ac888289016112e6565b935050606086013567ffffffffffffffff8111156113cd576113cc611262565b5b6113d98882890161130a565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61141d816113e8565b82525050565b60006020820190506114386000830184611414565b92915050565b61144781611287565b82525050565b6000602082019050611462600083018461143e565b92915050565b60008083601f84011261147e5761147d6112fb565b5b8235905067ffffffffffffffff81111561149b5761149a611300565b5b6020830191508360018202830111156114b7576114b6611305565b5b9250929050565b600080602083850312156114d5576114d461125d565b5b600083013567ffffffffffffffff8111156114f3576114f2611262565b5b6114ff85828601611468565b92509250509250929050565b611514816112c5565b82525050565b600060208201905061152f600083018461150b565b92915050565b60006020828403121561154b5761154a61125d565b5b6000611559848285016112b0565b91505092915050565b61156b816112c5565b82525050565b61157a81611287565b82525050565b60a0820160008201516115966000850182611562565b5060208201516115a96020850182611562565b5060408201516115bc6040850182611562565b5060608201516115cf6060850182611571565b5060808201516115e26080850182611562565b50505050565b600060a0820190506115fd6000830184611580565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061163d826112c5565b9150611648836112c5565b92508282019050808211156116605761165f611603565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060c0820190506116aa6000830185611580565b6116b760a083018461150b565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006116fb83856116be565b93506117088385846116cf565b611711836116de565b840190509392505050565b600060208201905081810360008301526117378184866116ef565b90509392505050565b60008151905061174f816112cf565b92915050565b60006020828403121561176b5761176a61125d565b5b600061177984828501611740565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006117de6026836116be565b91506117e982611782565b604082019050919050565b6000602082019050818103600083015261180d816117d1565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061184a6020836116be565b915061185582611814565b602082019050919050565b600060208201905081810360008301526118798161183d565b905091905056fea26469706673582212202e22fa52b9e8c06946c8f286f30a7b3aa748095b4b240b1b07710477d0d978a264736f6c63430008120033";

type NFTAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTAuction__factory extends ContractFactory {
  constructor(...args: NFTAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTAuction> {
    return super.deploy(_nftContract, overrides || {}) as Promise<NFTAuction>;
  }
  override getDeployTransaction(
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftContract, overrides || {});
  }
  override attach(address: string): NFTAuction {
    return super.attach(address) as NFTAuction;
  }
  override connect(signer: Signer): NFTAuction__factory {
    return super.connect(signer) as NFTAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTAuctionInterface {
    return new utils.Interface(_abi) as NFTAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTAuction {
    return new Contract(address, _abi, signerOrProvider) as NFTAuction;
  }
}
