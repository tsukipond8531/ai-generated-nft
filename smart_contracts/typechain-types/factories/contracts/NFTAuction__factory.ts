/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  NFTAuction,
  NFTAuctionInterface,
} from "../../contracts/NFTAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_nftContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NFTAuction__AuctionIsClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__AuctionIsRunning",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__BidderWithdrawFundFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__InsufficientBidFundToWithdraw",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__NotERC721Calling",
    type: "error",
  },
  {
    inputs: [],
    name: "NFTAuction__OwnerWithdrawFundFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "winner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amounBid",
        type: "uint256",
      },
    ],
    name: "AuctionEnd",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct NFTAuction.Auction",
        name: "newAuction",
        type: "tuple",
      },
    ],
    name: "NewAuctionStart",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "bidder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "previousBidder",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct NFTAuction.Auction",
        name: "auction",
        type: "tuple",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NewHighestBidder",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "bidOnNft",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "endAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionDuration",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getAuctionState",
    outputs: [
      {
        internalType: "enum NFTAuction.AuctionState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_bidder",
        type: "address",
      },
    ],
    name: "getBidderRefundAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentAuction",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "startTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "highestBidder",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "highestBidAmount",
            type: "uint256",
          },
        ],
        internalType: "struct NFTAuction.Auction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNftContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_tokenUri",
        type: "string",
      },
    ],
    name: "startAuction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawBid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162001a1838038062001a188339818101604052810190620000379190620001f5565b620000576200004b620000bf60201b60201c565b620000c760201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060008060146101000a81548160ff02191690836001811115620000b357620000b262000227565b5b02179055505062000256565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001bd8262000190565b9050919050565b620001cf81620001b0565b8114620001db57600080fd5b50565b600081519050620001ef81620001c4565b92915050565b6000602082840312156200020e576200020d6200018b565b5b60006200021e84828501620001de565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805161179162000287600039600081816105a7015281816109bb01528181610a6a0152610da701526117916000f3fe6080604052600436106100e15760003560e01c806373dc756c1161007f578063a4819a9711610059578063a4819a971461025b578063dcb66f1214610298578063f2fde38b146102c3578063fe67a54b146102ec576100f0565b806373dc756c146101dc57806378cb51af146102055780638da5cb5b14610230576100f0565b806337271cc7116100bb57806337271cc71461016c5780633ccfd60b14610183578063667c99de1461019a578063715018a6146101c5576100f0565b806308bfc300146100fa578063150b7a02146101255780632659b13c14610162576100f0565b366100f0576100ee610303565b005b6100f8610303565b005b34801561010657600080fd5b5061010f61058d565b60405161011c91906110a0565b60405180910390f35b34801561013157600080fd5b5061014c600480360381019061014791906111be565b6105a3565b6040516101599190611281565b60405180910390f35b61016a610303565b005b34801561017857600080fd5b5061018161079a565b005b34801561018f57600080fd5b50610198610902565b005b3480156101a657600080fd5b506101af6109b7565b6040516101bc91906112ab565b60405180910390f35b3480156101d157600080fd5b506101da6109df565b005b3480156101e857600080fd5b5061020360048036038101906101fe919061131c565b6109f3565b005b34801561021157600080fd5b5061021a610b0b565b6040516102279190611378565b60405180910390f35b34801561023c57600080fd5b50610245610b16565b60405161025291906112ab565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d9190611393565b610b3f565b60405161028f9190611378565b60405180910390f35b3480156102a457600080fd5b506102ad610b88565b6040516102ba9190611446565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e59190611393565b610c42565b005b3480156102f857600080fd5b50610301610cc5565b005b6000600181111561031757610316611029565b5b600060149054906101000a900460ff16600181111561033957610338611029565b5b03610370576040517f52f4ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061037a610b88565b9050600081608001519050803411156105325760008260600151905081600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103e59190611490565b9250508190555033836060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250503483608001818152505082600260015481548110610445576104446114c4565b5b906000526020600020906005020160008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401559050508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f6e719138f105b40d8d745744a7011863c5633387ac9ec154040c324999ba0ddd85346040516105249291906114f3565b60405180910390a350610589565b34600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105819190611490565b925050819055505b5050565b60008060149054906101000a900460ff16905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461062a576040517fcbe3282800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600060146101000a81548160ff021916908360018111156106505761064f611029565b5b021790555060006040518060a0016040528042815260200162069780426106779190611490565b815260200186815260200161068a610b16565b73ffffffffffffffffffffffffffffffffffffffff168152602001662386f26fc100008152509050600281908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004015550507f52cf86ea7b171700f88e16d46eab3d51ded34c5ecd49ca3d30d51d5f40abda068160405161077e9190611446565b60405180910390a163150b7a0260e01b91505095945050505050565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111610818576040517f0f59fb2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000905560003373ffffffffffffffffffffffffffffffffffffffff16826040516108819061154d565b60006040518083038185875af1925050503d80600081146108be576040519150601f19603f3d011682016040523d82523d6000602084013e6108c3565b606091505b50509050806108fe576040517f34c346de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b61090a610e9a565b6000610914610b16565b73ffffffffffffffffffffffffffffffffffffffff16476040516109379061154d565b60006040518083038185875af1925050503d8060008114610974576040519150601f19603f3d011682016040523d82523d6000602084013e610979565b606091505b50509050806109b4576040517fdec3d36a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6109e7610e9a565b6109f16000610f18565b565b6109fb610e9a565b60006001811115610a0f57610a0e611029565b5b600060149054906101000a900460ff166001811115610a3157610a30611029565b5b14610a68576040517f869ea31d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630a5d0bb283836040518363ffffffff1660e01b8152600401610ac39291906115c0565b6020604051808303816000875af1158015610ae2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0691906115f9565b505050565b600062069780905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b90610fe4565b600260015481548110610ba657610ba56114c4565b5b90600052602060002090600502016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482015481525050905090565b610c4a610e9a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb090611698565b60405180910390fd5b610cc281610f18565b50565b6000610ccf610b88565b9050600180811115610ce457610ce3611029565b5b600060149054906101000a900460ff166001811115610d0657610d05611029565b5b14610d3d576040517f52f4ee9300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060200151421015610d7b576040517f869ea31d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008060146101000a81548160ff02191690836001811115610da057610d9f611029565b5b02179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e30836060015184604001516040518463ffffffff1660e01b8152600401610e0a939291906116b8565b600060405180830381600087803b158015610e2457600080fd5b505af1158015610e38573d6000803e3d6000fd5b505050508060400151816060015173ffffffffffffffffffffffffffffffffffffffff167f547f741adc14a68529e0873c12b647ca383a8c08b758de4f9da208ccf150dcf28360800151604051610e8f9190611378565b60405180910390a350565b610ea2610fdc565b73ffffffffffffffffffffffffffffffffffffffff16610ec0610b16565b73ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d9061173b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060a00160405280600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061106957611068611029565b5b50565b600081905061107a82611058565b919050565b600061108a8261106c565b9050919050565b61109a8161107f565b82525050565b60006020820190506110b56000830184611091565b92915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110f0826110c5565b9050919050565b611100816110e5565b811461110b57600080fd5b50565b60008135905061111d816110f7565b92915050565b6000819050919050565b61113681611123565b811461114157600080fd5b50565b6000813590506111538161112d565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261117e5761117d611159565b5b8235905067ffffffffffffffff81111561119b5761119a61115e565b5b6020830191508360018202830111156111b7576111b6611163565b5b9250929050565b6000806000806000608086880312156111da576111d96110bb565b5b60006111e88882890161110e565b95505060206111f98882890161110e565b945050604061120a88828901611144565b935050606086013567ffffffffffffffff81111561122b5761122a6110c0565b5b61123788828901611168565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61127b81611246565b82525050565b60006020820190506112966000830184611272565b92915050565b6112a5816110e5565b82525050565b60006020820190506112c0600083018461129c565b92915050565b60008083601f8401126112dc576112db611159565b5b8235905067ffffffffffffffff8111156112f9576112f861115e565b5b60208301915083600182028301111561131557611314611163565b5b9250929050565b60008060208385031215611333576113326110bb565b5b600083013567ffffffffffffffff811115611351576113506110c0565b5b61135d858286016112c6565b92509250509250929050565b61137281611123565b82525050565b600060208201905061138d6000830184611369565b92915050565b6000602082840312156113a9576113a86110bb565b5b60006113b78482850161110e565b91505092915050565b6113c981611123565b82525050565b6113d8816110e5565b82525050565b60a0820160008201516113f460008501826113c0565b50602082015161140760208501826113c0565b50604082015161141a60408501826113c0565b50606082015161142d60608501826113cf565b50608082015161144060808501826113c0565b50505050565b600060a08201905061145b60008301846113de565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061149b82611123565b91506114a683611123565b92508282019050808211156114be576114bd611461565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060c08201905061150860008301856113de565b61151560a0830184611369565b9392505050565b600081905092915050565b50565b600061153760008361151c565b915061154282611527565b600082019050919050565b60006115588261152a565b9150819050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061159f8385611562565b93506115ac838584611573565b6115b583611582565b840190509392505050565b600060208201905081810360008301526115db818486611593565b90509392505050565b6000815190506115f38161112d565b92915050565b60006020828403121561160f5761160e6110bb565b5b600061161d848285016115e4565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611682602683611562565b915061168d82611626565b604082019050919050565b600060208201905081810360008301526116b181611675565b9050919050565b60006060820190506116cd600083018661129c565b6116da602083018561129c565b6116e76040830184611369565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611725602083611562565b9150611730826116ef565b602082019050919050565b6000602082019050818103600083015261175481611718565b905091905056fea264697066735822122051ebd7a936ba6c8e97fe4ccb6e986a91cc487f7d2e77249fcbc4c98c30ad7ffb64736f6c63430008120033";

type NFTAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTAuction__factory extends ContractFactory {
  constructor(...args: NFTAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<NFTAuction> {
    return super.deploy(_nftContract, overrides || {}) as Promise<NFTAuction>;
  }
  override getDeployTransaction(
    _nftContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_nftContract, overrides || {});
  }
  override attach(address: string): NFTAuction {
    return super.attach(address) as NFTAuction;
  }
  override connect(signer: Signer): NFTAuction__factory {
    return super.connect(signer) as NFTAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTAuctionInterface {
    return new utils.Interface(_abi) as NFTAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NFTAuction {
    return new Contract(address, _abi, signerOrProvider) as NFTAuction;
  }
}
