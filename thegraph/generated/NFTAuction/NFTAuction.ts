// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionEnd extends ethereum.Event {
  get params(): AuctionEnd__Params {
    return new AuctionEnd__Params(this);
  }
}

export class AuctionEnd__Params {
  _event: AuctionEnd;

  constructor(event: AuctionEnd) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amounBid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewAuctionStart extends ethereum.Event {
  get params(): NewAuctionStart__Params {
    return new NewAuctionStart__Params(this);
  }
}

export class NewAuctionStart__Params {
  _event: NewAuctionStart;

  constructor(event: NewAuctionStart) {
    this._event = event;
  }

  get newAuction(): NewAuctionStartNewAuctionStruct {
    return changetype<NewAuctionStartNewAuctionStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }
}

export class NewAuctionStartNewAuctionStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get highestBidder(): Address {
    return this[3].toAddress();
  }

  get highestBidAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class NewHighestBidder extends ethereum.Event {
  get params(): NewHighestBidder__Params {
    return new NewHighestBidder__Params(this);
  }
}

export class NewHighestBidder__Params {
  _event: NewHighestBidder;

  constructor(event: NewHighestBidder) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get auction(): NewHighestBidderAuctionStruct {
    return changetype<NewHighestBidderAuctionStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewHighestBidderAuctionStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get highestBidder(): Address {
    return this[3].toAddress();
  }

  get highestBidAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class NFTAuctionOwnershipTransferred extends ethereum.Event {
  get params(): NFTAuctionOwnershipTransferred__Params {
    return new NFTAuctionOwnershipTransferred__Params(this);
  }
}

export class NFTAuctionOwnershipTransferred__Params {
  _event: NFTAuctionOwnershipTransferred;

  constructor(event: NFTAuctionOwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NFTAuction__getCurrentAuctionResultValue0Struct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get highestBidder(): Address {
    return this[3].toAddress();
  }

  get highestBidAmount(): BigInt {
    return this[4].toBigInt();
  }
}

export class NFTAuction extends ethereum.SmartContract {
  static bind(address: Address): NFTAuction {
    return new NFTAuction("NFTAuction", address);
  }

  getAuctionDuration(): BigInt {
    let result = super.call(
      "getAuctionDuration",
      "getAuctionDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getAuctionDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAuctionDuration",
      "getAuctionDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAuctionState(): i32 {
    let result = super.call("getAuctionState", "getAuctionState():(uint8)", []);

    return result[0].toI32();
  }

  try_getAuctionState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getAuctionState",
      "getAuctionState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getBidderRefundAmount(_bidder: Address): BigInt {
    let result = super.call(
      "getBidderRefundAmount",
      "getBidderRefundAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_bidder)]
    );

    return result[0].toBigInt();
  }

  try_getBidderRefundAmount(_bidder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBidderRefundAmount",
      "getBidderRefundAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_bidder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentAuction(): NFTAuction__getCurrentAuctionResultValue0Struct {
    let result = super.call(
      "getCurrentAuction",
      "getCurrentAuction():((uint256,uint256,uint256,address,uint256))",
      []
    );

    return changetype<NFTAuction__getCurrentAuctionResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCurrentAuction(): ethereum.CallResult<
    NFTAuction__getCurrentAuctionResultValue0Struct
  > {
    let result = super.tryCall(
      "getCurrentAuction",
      "getCurrentAuction():((uint256,uint256,uint256,address,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTAuction__getCurrentAuctionResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getNftContract(): Address {
    let result = super.call("getNftContract", "getNftContract():(address)", []);

    return result[0].toAddress();
  }

  try_getNftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNftContract",
      "getNftContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class BidOnNftCall extends ethereum.Call {
  get inputs(): BidOnNftCall__Inputs {
    return new BidOnNftCall__Inputs(this);
  }

  get outputs(): BidOnNftCall__Outputs {
    return new BidOnNftCall__Outputs(this);
  }
}

export class BidOnNftCall__Inputs {
  _call: BidOnNftCall;

  constructor(call: BidOnNftCall) {
    this._call = call;
  }
}

export class BidOnNftCall__Outputs {
  _call: BidOnNftCall;

  constructor(call: BidOnNftCall) {
    this._call = call;
  }
}

export class EndAuctionCall extends ethereum.Call {
  get inputs(): EndAuctionCall__Inputs {
    return new EndAuctionCall__Inputs(this);
  }

  get outputs(): EndAuctionCall__Outputs {
    return new EndAuctionCall__Outputs(this);
  }
}

export class EndAuctionCall__Inputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class EndAuctionCall__Outputs {
  _call: EndAuctionCall;

  constructor(call: EndAuctionCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get _tokenUri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawBidCall extends ethereum.Call {
  get inputs(): WithdrawBidCall__Inputs {
    return new WithdrawBidCall__Inputs(this);
  }

  get outputs(): WithdrawBidCall__Outputs {
    return new WithdrawBidCall__Outputs(this);
  }
}

export class WithdrawBidCall__Inputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}

export class WithdrawBidCall__Outputs {
  _call: WithdrawBidCall;

  constructor(call: WithdrawBidCall) {
    this._call = call;
  }
}
